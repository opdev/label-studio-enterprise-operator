apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lse-app.fullname" . }}
  labels:
    {{- include "lse-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      {{- include "lse-app.selectorLabels" . | nindent 6 }}
  {{- with .Values.app.deploymentStrategy }}
  strategy:
  {{- toYaml . | trim | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.app.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lse-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lse-app.serviceAccountName" . }}
      {{- if .Values.app.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.app.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.app.automountServiceAccountToken }}
      initContainers:
        - name: lse-db-migrations
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          args: [ "python3", "/label-studio-enterprise/label_studio_enterprise/manage.py", "migrate" ]
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.app.initContainer.resources | nindent 12 }}
          env:
            - name: LSE_ROLE
              value: "app-init"
            {{ template "lse.common.envs" . }}
            - name: INIT_CONTAINER
              value: "true"
            {{- if .Values.app.logLevel }}
            - name: LOG_LEVEL
              value: "{{ .Values.app.logLevel }}"
            {{- end }}
            {{- if .Values.app.debug }}
            - name: DEBUG
              value: "true"
            {{- end }}
          volumeMounts:
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex
            - mountPath: /tmp
              name: tmp-dir
            {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
      containers:
        - name: lse-app
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          workingDir: /label-studio-enterprise
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: LSE_ROLE
              value: "app"
            {{ template "lse.common.envs" . }}
            {{- if .Values.app.logLevel }}
            - name: LOG_LEVEL
              value: "{{ .Values.app.logLevel }}"
            {{- end }}
            {{- if .Values.app.debug }}
            - name: DEBUG
              value: "true"
            {{- end }}
            {{- if .Values.app.extraEnvironmentVars -}}
            {{- range $key, $value := .Values.app.extraEnvironmentVars }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.app.extraEnvironmentSecrets -}}
            {{- range $key, $value := .Values.app.extraEnvironmentSecrets }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
            {{- end }}
          ports:
            - name: {{ .Values.app.service.portName }}
              containerPort: 8085
              protocol: TCP
          {{- if .Values.app.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: "{{ if eq .Values.global.contextPath "/" }}{{ .Values.app.readinessProbe.path }}{{ else }}{{ .Values.global.contextPath }}{{ .Values.app.readinessProbe.path }}{{ end }}"
              port: 8085
            failureThreshold: {{ .Values.app.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.app.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.app.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.app.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "{{ if eq .Values.global.contextPath "/" }}{{ .Values.app.livenessProbe.path }}{{ else }}{{ .Values.global.contextPath }}{{ .Values.app.livenessProbe.path }}{{ end }}"
              port: 8085
            failureThreshold: {{ .Values.app.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.app.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.app.livenessProbe.timeoutSeconds }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ['/bin/sh', '-c', 'sleep 15']
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /label-studio/data
            {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "gcs") }}
            {{- if or .Values.global.persistence.config.gcs.applicationCredentialsJSON (and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
            - name: gcs-storage-credentials
              mountPath: /opt/heartex/secrets/gcs
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex
            - mountPath: /tmp
              name: tmp-dir
      {{- with .Values.app.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.app.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "tplvalues.render" (dict "value" .Values.app.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.dnsPolicy }}
      dnsPolicy: {{ .Values.app.dnsPolicy }}
      {{- end }}
      {{- if .Values.app.enableServiceLinks }}
      enableServiceLinks: {{ .Values.app.enableServiceLinks }}
      {{- end }}
      {{- if .Values.app.shareProcessNamespace }}
      shareProcessNamespace: {{ .Values.app.shareProcessNamespace }}
      {{- end }}
      {{- with .Values.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
          {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "volume") }}
          persistentVolumeClaim:
            claimName: {{ include "lse-pvc.claimName" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "gcs") }}
        {{- if or .Values.global.persistence.config.gcs.applicationCredentialsJSON (and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
        - name: gcs-storage-credentials
          secret:
            {{- if and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey }}
            secretName: {{ .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret }}
            {{- else }}
            secretName: {{ include "lse-secrets.fullname" . }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
        - name: pg-ssl-certs
          secret:
            secretName: {{ .Values.global.pgConfig.ssl.pgSslSecretName }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
        - name: redis-ssl-certs
          secret:
            secretName: {{ .Values.global.redisConfig.ssl.redisSslSecretName  }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.app.extraVolumes -}}
          {{- toYaml .Values.app.extraVolumes | nindent 8 }}
        {{- end }}
        - name: opt-heartex
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
